package handler_test

import (
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/labstack/echo/v4"
	"github.com/stretchr/testify/assert"
	"go.uber.org/mock/gomock"

	"github.com/michelm117/cycling-coach-lab/handler"
	"github.com/michelm117/cycling-coach-lab/mocks"
	"github.com/michelm117/cycling-coach-lab/test_utils"
)

func TestRenderSetup(t *testing.T) {
	ctrl := gomock.NewController(t)
	mg := mocks.NewMockGlobalSettingServicer(ctrl)

	t.Run("App already initialized", func(t *testing.T) {
		mg.EXPECT().IsAppInitialized().Return(true)

		handler := handler.NewSetupHandler(mg, nil, nil)

		// Create a request
		req := httptest.NewRequest(http.MethodGet, "/setup", nil)
		rec := httptest.NewRecorder()
		c := echo.New().NewContext(req, rec)

		// Call the handler
		assert.NoError(t, handler.RenderSetup(c))
		assert.Equal(t, http.StatusTemporaryRedirect, rec.Code)
	})

	t.Run("App not initialized", func(t *testing.T) {
		mg.EXPECT().IsAppInitialized().Return(false)

		handler := handler.NewSetupHandler(mg, nil, nil)

		// Create a request
		req := httptest.NewRequest(http.MethodGet, "/setup", nil)
		rec := httptest.NewRecorder()
		c := echo.New().NewContext(req, rec)

		// Call the handler
		assert.NoError(t, handler.RenderSetup(c))
		assert.Equal(t, http.StatusOK, rec.Code)
		test_utils.MakeSnapshot(t, rec.Body.String())
	})
}

func TestSetup(t *testing.T) {
	ctrl := gomock.NewController(t)
	mg := mocks.NewMockGlobalSettingServicer(ctrl)

	t.Run("App already initialized", func(t *testing.T) {
		mg.EXPECT().IsAppInitialized().Return(true)

		handler := handler.NewSetupHandler(mg, nil, nil)

		// Create a request
		req := httptest.NewRequest(http.MethodPost, "/setup", nil)
		rec := httptest.NewRecorder()
		c := echo.New().NewContext(req, rec)

		// Call the handler
		assert.NoError(t, handler.RenderSetup(c))
		assert.Equal(t, http.StatusTemporaryRedirect, rec.Code)
	})
}
