package pages

import (
	"fmt"

	"github.com/michelm117/cycling-coach-lab/model"
	"github.com/michelm117/cycling-coach-lab/views/layout"
	"github.com/michelm117/cycling-coach-lab/views/components"
)

templ UserTable(au *model.User, users []*model.User) {
	<div class="h-full overflow-auto">
		<table class="table table-auto">
			<thead>
				<tr>
					<th>Benutzer</th>
					<th>Status</th>
					<th>Registriert seit</th>
					<th>Aktionen</th>
				</tr>
			</thead>
			<tbody id="user-table" data-cy="user-table">
				for _, user:= range users {
					@UserRow(user, au.ID == user.ID)
				}
			</tbody>
		</table>
	</div>
}

templ UserRow(user *model.User, disableDeletion bool) {
	<tr id={ fmt.Sprintf("user_row_%v", user.ID) } data-cy="user-row">
		<td>
			<div class="flex items-center gap-3">
				@components.Avatar(user.Firstname, user.Lastname)
				<div>
					<div class="font-bold" id="user-firstname">
						{ user.Firstname } { user.Lastname }
					</div>
					<div class="text-sm opacity-50" data-cy="user-email" id="user-email">
						{ user.Email }
					</div>
				</div>
			</div>
		</td>
		<td>
			<span
				class={ "indicator-item indicator-middle indicator-center badge" , templ.KV("badge-info",
      user.Status=="active" ), templ.KV("badge-warning", user.Status=="inactive" ) }
			>
				{ user.Status }
			</span>
		</td>
		<td>2023/12/12</td>
		<td class="dropdown dropdown-left overflow-visible">
			<div data-cy="open-actions" tabindex="0" role="button" class="btn m-1 btn-xs btn-ghost">
				<i class="fa-solid fa-ellipsis-vertical"></i>
			</div>
			<ul data-cy="actions" tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-200 rounded-box w-52">
				if !disableDeletion {
					<li
						data-cy="action-delete-user"
						hx-delete={ fmt.Sprintf("/users/%v", user.ID) }
						hx-trigger="deleteUser"
						hx-target="closest tr"
						class="text-warning"
						hx-swap="outerHTML"
						onClick="Swal.fire(
          {
            title: 'Bist du sicher, dass du den Benutzer löschen möchtest?', 
            text:'Diese Aktion kann nicht rückgängig gemacht werden!',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Ja, löschen!',
            cancelButtonText: 'Abbrechen'
          }).then(({ isConfirmed }) => {
            if(isConfirmed) {
              htmx.trigger(this, 'deleteUser');
            } 
        })"
					>
						<a><i class="fa-solid fa-trash"></i> Löschen</a>
					</li>
				} else {
					<li class="text-warning disabled">
						<a><i class="fa-solid fa-trash"></i> Löschen</a>
					</li>
				}
			</ul>
		</td>
	</tr>
}

templ Overlay(title, trigger, tooltip string) {
	<div
		x-trap={ trigger }
		@keyup.esc={ fmt.Sprintf("%s = false", trigger) }
		:@closeOverlay={ fmt.Sprintf("%s = false", trigger) }
	>
		<div
			class="fixed left-[calc(-50vw+50%)] md:left-0 top-0 bottom-0 h-fill w-full bg-gray-900 bg-opacity-50 z-50"
			x-cloak
			x-show={ trigger }
			@click={ fmt.Sprintf("%s = !%s", trigger, trigger) }
			x-transition:enter="transition ease-out duration-300"
			x-transition:enter-start="opacity-0 transform"
			x-transition:enter-end="opacity-100 transform"
			x-transition:leave="transition ease-in duration-300"
			x-transition:leave-start="opacity-100 transform"
			x-transition:leave-end="opacity-0 transform"
		></div>
		<div
			data-cy="create-user-overlay"
			class="fixed bottom-0 left-[calc(-50vw+50%)] md:left-auto md:right-0 w-screen md:w-fit h-full bg-base-100 rounded-lg shadow-lg z-50"
			x-show={ trigger }
			x-cloak
			x-transition:enter="transition ease-out duration-300"
			x-transition:enter-start="opacity-0 transform translate-x-full"
			x-transition:enter-end="opacity-100 transform translate-x-0"
			x-transition:leave="transition ease-in duration-300"
			x-transition:leave-start="opacity-1000 transform translate-x-0"
			x-transition:leave-end="opacity-0 transform translate-x-full"
		>
			<button
				data-cy="create-user-overlay-close"
				class="btn btn-ghost absolute top-2 right-4"
				@click={ fmt.Sprintf("%s = false", trigger) }
			>
				<i class="fa-solid fa-times"></i>
			</button>
			<div class="flex flex-col items-center p-4 h-full">
				<div class="flex items-center gap-4">
					<h3 class="font-bold text-lg">{ title }</h3>
					if tooltip != "" {
						<div class="tooltip tooltip-bottom" data-tip={ tooltip }>
							<i class="fa-solid fa-info-circle"></i>
						</div>
					}
				</div>
				<div class="flex flex-col justify-center mt-6"></div>
				{ children... }
			</div>
		</div>
	</div>
}

templ InviteUserForm() {
	<form
		hx-post="/users/invites"
		hx-swap="none"
		class="flex flex-col justify-between w-full h-full flex-1 space-y-4 mb-4 min-w-[483px]"
	>
		<div class="flex-1 overflow-y-auto max-h-[calc(50vh)]">
			<div class="flex flex-col">
				<label for="email" class="text-sm">Email:</label>
				<input type="email" id="email" data-cy="email" name="email" class="input input-bordered" required/>
			</div>
			<div class="flex flex-col">
				<label for="role" class="text-sm">Benutzerrole:</label>
				<select type="role" id="role" data-cy="role" name="role" class="select select-bordered">
					<option selected value="athlete">Athlet</option>
					<option value="admin">Administrator</option>
				</select>
			</div>
		</div>
		<button data-cy="create-user-overlay-submit" type="submit" class="btn btn-primary w-full mt-6">
			Erstellen
		</button>
	</form>
}

templ AddUserForm() {
	<form
		hx-post="/users"
		hx-swap="none"
		class="flex flex-col justify-between w-full h-full flex-1 space-y-4 mb-4"
		x-init="OpenCreateUserOverlay = false"
	>
		<div class="flex-1 overflow-y-auto max-h-[calc(50vh)]">
			<div class="grid sm:grid-cols-2 gap-4">
				<div class="flex flex-col">
					<label for="firstname" class="text-sm">Vorname:</label>
					<input data-cy="firstname" type="text" id="firstname" name="firstname" class="input input-bordered" required/>
				</div>
				<div class="flex flex-col">
					<label for="lastname" class="text-sm">Nachname:</label>
					<input type="text" id="lastname" data-cy="lastname" name="lastname" class="input input-bordered" required/>
				</div>
			</div>
			<div class="flex flex-col">
				<label for="dateOfBirth" class="text-sm">Geburtsdatum:</label>
				<input type="date" id="dateOfBirth" data-cy="dateOfBirth" name="dateOfBirth" required/>
			</div>
			<div class="flex flex-col">
				<label for="email" class="text-sm">Email:</label>
				<input type="email" id="email" data-cy="email" name="email" class="input input-bordered" required/>
			</div>
			<div class="flex flex-col">
				<label for="password" class="text-sm">Passwort:</label>
				<input type="password" id="password" data-cy="password" name="password" class="input input-bordered" required/>
			</div>
			<div class="flex flex-col">
				<label for="password" class="text-sm">Passwort wiederholen:</label>
				<input
					type="password"
					id="confirmPassword"
					data-cy="confirmPassword"
					name="confirmPassword"
					class="input input-bordered"
					required
				/>
			</div>
			<div class="flex flex-col">
				<label for="role" class="text-sm">Benutzerrole:</label>
				<select type="role" id="role" data-cy="role" name="role" class="select select-bordered">
					<option selected value="athlete">Athlet</option>
					<option value="admin">Administrator</option>
				</select>
			</div>
		</div>
		<button data-cy="create-user-overlay-submit" type="submit" class="btn btn-primary w-full mt-6">
			Erstellen
		</button>
	</form>
}

templ AddUserResponse(user *model.User) {
	<tbody id="user-table" data-cy="user-table" hx-swap-oob="beforeend:#user-table">
		@UserRow(user, false)
	</tbody>
	@AddUserForm()
}

templ UserManagementView(au *model.User, users []*model.User) {
	<div x-data="{userIdToDelete: null, OpenCreateUserOverlay: false, OpenInviteUserOverlay: false }">
		@UserTable(au, users)
		@Overlay("Benutzer einladen", "OpenInviteUserOverlay", "Lade einen Benutzer per Email ein. Der Benutzer kann seine Daten dann selbst vervollständigen.") {
			@InviteUserForm()
		}
		@Overlay("Benutzer hinzufügen", "OpenCreateUserOverlay", "") {
			@AddUserForm()
		}
		@components.FloatingActionButtons([]model.FloatingAction{
			{
				Name:    "Einladen",
				Icon:    "fa-envelope",
				OnClick: "OpenInviteUserOverlay = true",
			},
			{
				Name:    "Erstellen",
				Icon:    "fa-user",
				OnClick: "OpenCreateUserOverlay = true",
			},
		})
	</div>
}

templ UserManagementPage(au *model.User, theme string, users []*model.User) {
	@layout.DashboardLayout(au, theme) {
		@UserManagementView(au, users)
	}
}
