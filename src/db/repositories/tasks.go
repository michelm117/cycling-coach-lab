package repositories

import (
	"database/sql"
	"fmt"

	"go.uber.org/zap"

	"github.com/michelm117/cycling-coach-lab/models"
)

type TasksRepository struct {
	db     *sql.DB
	logger *zap.SugaredLogger
}

func NewTasksRepository(db *sql.DB, logger *zap.SugaredLogger) *TasksRepository {
	return &TasksRepository{
		db:     db,
		logger: logger,
	}
}

func (repo *TasksRepository) GetById(id int) (*models.Task, error) {
	row := repo.db.QueryRow("SELECT title, content, completed FROM tasks WHERE tasks.id = $1", id)

	var task models.Task
	err := row.Scan(&task.Title, &task.Content)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, fmt.Errorf("Task with id '%d' not found", id)
		}
		return nil, fmt.Errorf("Error while trying to execute query: %s", err)
	}

	return &task, nil
}

func (repo *TasksRepository) DeleteTask(task models.Task) (*models.Task, error) {
	_, err := repo.db.Exec(
		"DELETE FROM tasks WHERE tasks.id = $1",
		task.ID)

	if err != nil {
		return nil, fmt.Errorf("Error while trying to execute query: %s", err)
	}

	return &task, nil
}

func (repo *TasksRepository) AddTask(task models.Task) (*models.Task, error) {
	result, err := repo.db.Exec(
		"INSERT INTO tasks (title, content, completed) VALUES ($1, $2, $3)",
		task.Title,
		task.Content,
	)

	if err != nil {
		return nil, fmt.Errorf("Task could no be added: %s", err)
	}

	// Get the ID generated by the database
	id, err := result.LastInsertId()
	if err != nil {
		return nil, fmt.Errorf("Failed to get last insert ID: %s", err)
	}

	// Update the task with the generated ID
	task.ID = int(id)

	return &task, nil
}

func (repo *TasksRepository) GetAllTasks() ([]*models.Task, error) {
	// TODO fehler hier, iwie tsaks db noch nicht live da
	rows, err := repo.db.Query("SELECT id, title FROM tasks")
	if err != nil {
		return nil, fmt.Errorf("Error while trying to execute query: %s", err)
	}

	var tasks []*models.Task
	for rows.Next() {
		var task models.Task
		err := rows.Scan(&task.ID, &task.Title)
		if err != nil {
			return nil, fmt.Errorf("Error while trying to execute query: %s", err)
		}
		tasks = append(tasks, &task)
	}

	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("Error while trying to execute query: %s", err)
	}

	defer rows.Close()
	return tasks, nil
}

func (repo *TasksRepository) Count() (int, error) {
	row := repo.db.QueryRow("SELECT count(*) FROM tasks")
	var count int
	err := row.Scan(&count)
	if err != nil {
		return -1, fmt.Errorf("Error while trying to execute query: %s", err)
	}
	return count, nil
}
