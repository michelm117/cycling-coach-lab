// Code generated by MockGen. DO NOT EDIT.
// Source: services/email.service.go
//
// Generated by this command:
//
//	mockgen -source services/email.service.go -destination mocks/email.service.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/michelm117/cycling-coach-lab/model"
	gomock "go.uber.org/mock/gomock"
)

// MockEmailServicer is a mock of EmailServicer interface.
type MockEmailServicer struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServicerMockRecorder
}

// MockEmailServicerMockRecorder is the mock recorder for MockEmailServicer.
type MockEmailServicerMockRecorder struct {
	mock *MockEmailServicer
}

// NewMockEmailServicer creates a new mock instance.
func NewMockEmailServicer(ctrl *gomock.Controller) *MockEmailServicer {
	mock := &MockEmailServicer{ctrl: ctrl}
	mock.recorder = &MockEmailServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailServicer) EXPECT() *MockEmailServicerMockRecorder {
	return m.recorder
}

// GetEmailSettings mocks base method.
func (m *MockEmailServicer) GetEmailSettings() (*model.EmailSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailSettings")
	ret0, _ := ret[0].(*model.EmailSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailSettings indicates an expected call of GetEmailSettings.
func (mr *MockEmailServicerMockRecorder) GetEmailSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailSettings", reflect.TypeOf((*MockEmailServicer)(nil).GetEmailSettings))
}

// SaveEmailSettings mocks base method.
func (m *MockEmailServicer) SaveEmailSettings(arg0 *model.EmailSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEmailSettings", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEmailSettings indicates an expected call of SaveEmailSettings.
func (mr *MockEmailServicerMockRecorder) SaveEmailSettings(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEmailSettings", reflect.TypeOf((*MockEmailServicer)(nil).SaveEmailSettings), arg0)
}

// SendEmail mocks base method.
func (m *MockEmailServicer) SendEmail(to []string, subject, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", to, subject, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailServicerMockRecorder) SendEmail(to, subject, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailServicer)(nil).SendEmail), to, subject, body)
}
